function menu_princ
global methodes
global pendules
global params
global etat_initial

title = 'Menu principal';
options = {'Paramètres','Sélection méthode','Changer/ajouter des conditions initiales','Animer','Enregistrer vidéo','Quitter'};
choix = disp_menu(options,title);

switch choix
    case 1 % Accéder au menu des paramètres
        menu_parametres
        
    case 2 % Changer la méthode de résolution numérique 
        list = ["Euler explicite" "Euler implicite" "Verlet" "Runge Kutta 4"];
        [select,tf] = listdlg('PromptString','Sélectionner les méthodes souhaitées:',...
                           'SelectionMode','multiple',...
                           'ListString',list,'InitialValue',methodes);
        methodes = select;
        fprintf("Méthodes changées avec succès!")
        init_pendules;
        pause(1)
        menu_princ
        
    case 3 % Changer les conditions initiales
                    
    case 4 % Animer
        % la fonction solutionner solutionne chaque pendule un par un selon
        % les méthodes définies dans l'objet "pendules"
        solutionner
        
%         for i = 1:size(pendules,2)
%             switch pendules{i}{6}
%                 case "EE" % Ce pendule utilise EE
%                     [t, etat] = EE(etat_initial(:,pendules{i}{7}),params,params(11),params(10));
%                     [x1 y1 x2 y2] = position(etat,params);
%                     pendules{i}{2} = x1 ; pendules{i}{3} = y1 ; pendules{i}{4} = x2 ; pendules{i}{5} = y2 ; % On stocke les solutions dans les objets pendules 
%                 
%                 case "EI" % Ce pendule utilise EI
%                     [t, etat] = EI(etat_initial(:,pendules{i}{7}),params,params(11),params(10));
%                     [x1 y1 x2 y2] = position(etat,params);
%                     pendules{i}{2} = x1 ; pendules{i}{3} = y1 ; pendules{i}{4} = x2 ; pendules{i}{5} = y2 ; % On stocke les solutions dans les objets pendules
%                 
%                 case "Verlet" % Ce pendule utilise Verlet
%                     [t, etat] = Verlet(etat_initial(:,pendules{i}{7}),params,params(11),params(10));
%                     [x1 y1 x2 y2] = position(etat,params);
%                     pendules{i}{2} = x1 ; pendules{i}{3} = y1 ; pendules{i}{4} = x2 ; pendules{i}{5} = y2 ; % On stocke les solutions dans les objets pendules
%                 
%                 case "RK4" % Ce pendule utilise RK4
%                     [t, etat] = RK4(etat_initial(:,pendules{i}{7}),params,params(11),params(10));
%                     [x1 y1 x2 y2] = position(etat,params);
%                     pendules{i}{2} = x1 ; pendules{i}{3} = y1 ; pendules{i}{4} = x2 ; pendules{i}{5} = y2 ; % On stocke les solutions dans les objets pendules
%             end
            
        end
        % On anime ensuite les pendules
        animate(pendules,params(11),false)
        fprintf("Simulation terminée!")
        init_pendules
        pause(2)
        menu_princ
        
    case 5 % Créer un enregistrement vidéo
        % C'est la fonction animate.m qui permet l'enregistrement. Si on
        % lui fourni l'argument 'true', elle désactive le graphe et produit
        % un vidéo MPEG-4 à la place
        slct = false;
        while ~slct
            clc
            choix = input("Êtes-vous sûr de vouloir continuer?\nL'enregistrement peut prendre plusieurs minutes! [y/n] : ",'s')
            if choix == 'y' % On procède avec l'enregistrement
                animate(pendules,params(11),true)
                fprintf("\nL'enregistrement a été un succès!")
                slct = true;
                init_pendules
                pause(2)
                menu_princ
            elseif choix == 'n'
                slct = true;
                menu_princ
                
            else
                fprintf("\n Veuillez sélectionner une des options [y/n]")
                pause(1.5)
            end
        end
        
    case 6 % Quitter
        clc
        clear all
        close all
        return
end
end